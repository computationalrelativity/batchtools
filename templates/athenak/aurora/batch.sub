#!/bin/bash -l
@(#PBS -W depend=afterok:@CHAINED_JOB_ID@)@
#PBS -A @ALLOCATION@
#PBS -q @QUEUE@
#PBS -N @SIMULATION_NAME@
#PBS -l select=@NODES@
#PBS -l walltime=@WALLTIME@
#PBS -l filesystems=flare:home
#PBS -M @EMAIL@
#PBS -m abe
#PBS -k doe
#PBS -o @RUNDIR@/@SIMULATION_NAME@.out
#PBS -e @RUNDIR@/@SIMULATION_NAME@.err
#PBS -l place=scatter

echo "Preparing:"
set -x              # Output commands
set -e              # Abort on errors
cd @RUNDIR@

# Set environment
NTHREADS=@NUM_THREADS@    # Number of OMP threads per rank
NNODES=@NODES@            # Number of Nodes
NRANKS=@NUM_GPUS@         # Number of MPI ranks per node (assume one per GPU)
NTOTRANKS=$(( NNODES * NRANKS ))

export MPICH_GPU_SUPPORT_ENABLED=1
export OMP_NUM_THREADS=1
export OMP_PLACES=threads

CPU_BIND="list:1-8:9-16:17-24:25-32:33-40:41-48:53-60:61-68:69-76:77-84:85-92:93-100"

echo "Checking:"
pwd
hostname
date

echo "Environment:"
env | sort > ENVIRONMENT
echo "NUM_OF_NODES=${NNODES}  TOTAL_NUM_RANKS=${NTOTRANKS}  RANKS_PER_NODE=${NRANKS}  THREADS_PER_RANK=${NTHREADS}"

# Check for restart files
if [ -d parent/rst ]; then
  restart_files=$(ls -r parent/rst/*.rst)
  restart_file=(${restart_files[0]})
  restart_line="-r $restart_file -i @PARFILE@"
  printf "\nrestarting from $restart_file\n\n"
else
  restart_line="-i @PARFILE@"
  printf "\nstarting from beginning\n\n"
fi

mpiexec -np $((@NUM_GPUS@ * @NODES@)) \
        -ppn $((@NUM_GPUS@)) \
        --cpu-bind=$CPU_BIND /soft/tools/mpi_wrapper_utils/gpu_tile_compact.sh \
        @EXECUTABLE@ \
        -w @WATCHDOG_TIMEOUT_SECONDS@ \
        -d @RUNDIR@ \
        -t @TERMINATION_TIME@ \
        $restart_line
